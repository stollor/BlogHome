// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        burnFireColor: { value: [0, 0, 0, 0] , editor: { type: color } }
        burnThreshold: { value: 0 }
        burnLimit: { value : [ 0.05, 0.2, 1.0 , 1.0 ] }
        burnLimitVal: { value : [ 0,0,0,0]  }
        noiseTex: { value: white }

}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  uniform sampler2D noiseTex;
  uniform Constant {
    vec4 burnLimit;
    vec4 burnFireColor;
    vec4 burnLimitVal;
    float burnThreshold;
    
  };
  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 new_uv = uv0;
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, new_uv);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif

      vec4 burn = vec4(1, 1, 1, 1);
      //CCTexture(noiseTex, new_uv, burn);
      burn*=CCSampleWithAlphaSeparated(noiseTex, new_uv);
      float value=burn.r;
      if(burnLimitVal.a>0.5){
        value=(burn.r+burn.g+burn.b)/3.0;
      }else if(burnLimitVal.r>0.5){
        value=burn.r;
      }else if(burnLimit.g>0.5){
        value=burn.g;
      }
      else if(burnLimit.b>0.5){
        value=burn.b;
      }
      // if(burnLimitEqu>0.5){
      //   value=(burn.r+burn.g+burn.b)/3;
      // }

      if (value < burnThreshold)
      {
        discard;
      }

      if (burnThreshold > burnLimit.x && value < burnThreshold +burnLimit.y) {
        //discard;
        float scale=1.0;
        if(value>burnThreshold){
            scale=(value-burnThreshold)/burnLimit.y;
        }
        
        o = vec4(burnFireColor.r*scale,burnFireColor.g*scale,burnFireColor.b*scale,o.a);
        //o = vec4(burnFireColor.rgb, o.a);
      }

      o.a*=1.0-burnThreshold;

    #endif
    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
