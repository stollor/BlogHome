[1,["c7IgPElOBLIZLM1Rtj1fYF"],["_effectAsset"],[["cc.Material",["_name","_props","_states","_defines"],-1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3,5],[1,0,1,2,4]],[[[[0,"obscure",[{"_BlurOffsetX":0.005,"_BlurOffsetY":0.005}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[0],[0]],[[[1,"../models/shader/obscure/obscure",[{"hash":4273309969,"name":"../models/shader/obscure/obscure|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"useGaussianBlur","type":13,"count":1},{"name":"useGaussianBlurLinear13","type":13,"count":1},{"name":"useBlur1","type":13,"count":1},{"name":"useBlur2","type":13,"count":1},{"name":"useGray","type":13,"count":1},{"name":"useMosaic","type":13,"count":1},{"name":"_BlurOffsetX","type":13,"count":1},{"name":"_BlurOffsetY","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"useGaussianBlur","type":13,"count":1},{"name":"useGaussianBlurLinear13","type":13,"count":1},{"name":"useBlur1","type":13,"count":1},{"name":"useBlur2","type":13,"count":1},{"name":"useGray","type":13,"count":1},{"name":"useMosaic","type":13,"count":1},{"name":"_BlurOffsetX","type":13,"count":1},{"name":"_BlurOffsetY","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_POINT 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_SPHERE 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nin vec4 color;\nlayout(std140) uniform Constant{\n  float useGaussianBlur;\n  float useGaussianBlurLinear13;\n  float useBlur1;\n  float useBlur2;\n  float useGray;\n  float useMosaic;\n  float _BlurOffsetX;\n  float _BlurOffsetY;\n};\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nconst float RADIUS = 10.0;\nconst vec2 size=vec2(432.0,948.0);\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec4 GaussianBlur (sampler2D tex, vec2 pos) {\n  vec4 color = vec4(0,0,0,0);\n  float sum = 0.0;\n  for (float r = -RADIUS; r <= RADIUS; r++) {\n    for(float c = -RADIUS; c <= RADIUS; c++){\n      vec2 target = pos + vec2(r / size.x,c/size.y);\n      float weight = (RADIUS - abs(r)) * (RADIUS - abs(c));\n      color += texture(tex, target)*weight;\n      sum += weight;\n    }\n  }\n  color = color/sum;\n  return color;\n}\nvec4 GaussianBlurLinear13(sampler2D tex, vec2 pos) {\n    vec4 color = 0.1964825501511404 * texture(tex, pos);\n    color += 0.2969069646728344 * texture(tex, pos + vec2(1.411764705882353 * _BlurOffsetX  ,1.411764705882353 * _BlurOffsetY ));\n    color += 0.2969069646728344 * texture(tex, pos + vec2(-1.411764705882353 * _BlurOffsetX  , -1.411764705882353 * _BlurOffsetY ));\n    color += 0.09447039785044732 * texture(tex, pos + vec2(3.2941176470588234 * _BlurOffsetX  , 3.2941176470588234 * _BlurOffsetY ));\n    color += 0.09447039785044732 * texture(tex, pos + vec2(-3.2941176470588234 * _BlurOffsetX  , -3.2941176470588234 * _BlurOffsetY ));\n    color += 0.010381362401148057 * texture(tex, pos + vec2(5.176470588235294 * _BlurOffsetX  , 5.176470588235294 * _BlurOffsetY ));\n    color += 0.010381362401148057 * texture(tex, pos + vec2(-5.176470588235294 * _BlurOffsetX  , -5.176470588235294 * _BlurOffsetY ));\n    return color;\n}\nvec4 easyBlur (sampler2D tex, vec2 pos) {\n  vec4 color = vec4(0,0,0,0);\n  float sum = 0.0;\n  for (float r = -RADIUS; r <= RADIUS; r++) {\n    vec2 target = pos + vec2(r / size.x,0.0);\n    float weight = (RADIUS - abs(r));\n    color += texture(tex, target)*weight;\n    sum += weight;\n  }\n  for(float c = -RADIUS; c <= RADIUS; c++){\n    vec2 target = pos + vec2(0.0,c/size.y);\n    float weight = (RADIUS - abs(c));\n    color += texture(tex, target)*weight;\n    sum +=weight;\n  }\n  color = color/sum;\n  return color;\n}\nconst float repeats=16.0;\nvec4 easyBlur2(sampler2D tex, vec2 pos){\n  float _blurAmount = 0.08 * 0.2;\n  vec4 color = vec4(0.0);\n  for(float i = 0.0; i < repeats; i ++ ) {\n    vec2 q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i, pos.x + pos.y)) + _blurAmount);\n    vec2 uv2 = pos + (q * _blurAmount);\n    color += texture(tex, uv2).rgba / 2.0;\n    q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i + 2.0, pos.x + pos.y + 24.0)) + _blurAmount);\n    uv2 = pos + (q * _blurAmount);\n    color += texture(tex, uv2).rgba / 2.0;\n  }\n  color = color/repeats;\n  color = color/1.0;\n  return color;\n}\nvec2 getUvMapPos(vec2 pos,float count) {\n  float block_w = 1.0 / count;\n  float block_x_idx = floor(pos.x / block_w);\n  float block_h = 1.0 / count;\n  float block_y_idx = floor(pos.y / block_h);\n  return vec2(block_w * (block_x_idx + 0.5), block_h * (block_y_idx + 0.5));\n}\nvec4 frag () {\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  vec4 blurColor = vec4(0.0,0.0,0.0,0.0);\n  vec2 realPos = uv0;\n  float useFunNum=0.0;\n  if(useMosaic>1.0){\n    realPos=getUvMapPos(uv0,useMosaic);\n  }\n  if(useGaussianBlur>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=GaussianBlur(cc_spriteTexture,realPos);\n  }\n  if(useGaussianBlurLinear13>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=GaussianBlurLinear13(cc_spriteTexture,realPos);\n  }\n  if(useBlur1>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=easyBlur(cc_spriteTexture,realPos);\n  }\n  if(useBlur2>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=easyBlur2(cc_spriteTexture,realPos);\n  }\n  if(useFunNum==0.0){\n    o *= texture(cc_spriteTexture, realPos);\n  }else{\n    blurColor = blurColor / useFunNum;\n    o *= blurColor;\n  }\n  if(useGray>0.0){\n    float gray  = 0.3 * o.r + 0.7 * o.g + 0.1 * o.b;\n    o.r = o.g = o.b = gray;\n  }\n  o *= color;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_POINT 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_SPHERE 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec4 color;\n   uniform float useGaussianBlur;\n   uniform float useGaussianBlurLinear13;\n   uniform float useBlur1;\n   uniform float useBlur2;\n   uniform float useGray;\n   uniform float useMosaic;\n   uniform float _BlurOffsetX;\n   uniform float _BlurOffsetY;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nconst float RADIUS = 10.0;\nconst vec2 size=vec2(432.0,948.0);\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec4 GaussianBlur (sampler2D tex, vec2 pos) {\n  vec4 color = vec4(0,0,0,0);\n  float sum = 0.0;\n  for (float r = -RADIUS; r <= RADIUS; r++) {\n    for(float c = -RADIUS; c <= RADIUS; c++){\n      vec2 target = pos + vec2(r / size.x,c/size.y);\n      float weight = (RADIUS - abs(r)) * (RADIUS - abs(c));\n      color += texture2D(tex, target)*weight;\n      sum += weight;\n    }\n  }\n  color = color/sum;\n  return color;\n}\nvec4 GaussianBlurLinear13(sampler2D tex, vec2 pos) {\n    vec4 color = 0.1964825501511404 * texture2D(tex, pos);\n    color += 0.2969069646728344 * texture2D(tex, pos + vec2(1.411764705882353 * _BlurOffsetX  ,1.411764705882353 * _BlurOffsetY ));\n    color += 0.2969069646728344 * texture2D(tex, pos + vec2(-1.411764705882353 * _BlurOffsetX  , -1.411764705882353 * _BlurOffsetY ));\n    color += 0.09447039785044732 * texture2D(tex, pos + vec2(3.2941176470588234 * _BlurOffsetX  , 3.2941176470588234 * _BlurOffsetY ));\n    color += 0.09447039785044732 * texture2D(tex, pos + vec2(-3.2941176470588234 * _BlurOffsetX  , -3.2941176470588234 * _BlurOffsetY ));\n    color += 0.010381362401148057 * texture2D(tex, pos + vec2(5.176470588235294 * _BlurOffsetX  , 5.176470588235294 * _BlurOffsetY ));\n    color += 0.010381362401148057 * texture2D(tex, pos + vec2(-5.176470588235294 * _BlurOffsetX  , -5.176470588235294 * _BlurOffsetY ));\n    return color;\n}\nvec4 easyBlur (sampler2D tex, vec2 pos) {\n  vec4 color = vec4(0,0,0,0);\n  float sum = 0.0;\n  for (float r = -RADIUS; r <= RADIUS; r++) {\n    vec2 target = pos + vec2(r / size.x,0.0);\n    float weight = (RADIUS - abs(r));\n    color += texture2D(tex, target)*weight;\n    sum += weight;\n  }\n  for(float c = -RADIUS; c <= RADIUS; c++){\n    vec2 target = pos + vec2(0.0,c/size.y);\n    float weight = (RADIUS - abs(c));\n    color += texture2D(tex, target)*weight;\n    sum +=weight;\n  }\n  color = color/sum;\n  return color;\n}\nconst float repeats=16.0;\nvec4 easyBlur2(sampler2D tex, vec2 pos){\n  float _blurAmount = 0.08 * 0.2;\n  vec4 color = vec4(0.0);\n  for(float i = 0.0; i < repeats; i ++ ) {\n    vec2 q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i, pos.x + pos.y)) + _blurAmount);\n    vec2 uv2 = pos + (q * _blurAmount);\n    color += texture2D(tex, uv2).rgba / 2.0;\n    q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i + 2.0, pos.x + pos.y + 24.0)) + _blurAmount);\n    uv2 = pos + (q * _blurAmount);\n    color += texture2D(tex, uv2).rgba / 2.0;\n  }\n  color = color/repeats;\n  color = color/1.0;\n  return color;\n}\nvec2 getUvMapPos(vec2 pos,float count) {\n  float block_w = 1.0 / count;\n  float block_x_idx = floor(pos.x / block_w);\n  float block_h = 1.0 / count;\n  float block_y_idx = floor(pos.y / block_h);\n  return vec2(block_w * (block_x_idx + 0.5), block_h * (block_y_idx + 0.5));\n}\nvec4 frag () {\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  vec4 blurColor = vec4(0.0,0.0,0.0,0.0);\n  vec2 realPos = uv0;\n  float useFunNum=0.0;\n  if(useMosaic>1.0){\n    realPos=getUvMapPos(uv0,useMosaic);\n  }\n  if(useGaussianBlur>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=GaussianBlur(cc_spriteTexture,realPos);\n  }\n  if(useGaussianBlurLinear13>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=GaussianBlurLinear13(cc_spriteTexture,realPos);\n  }\n  if(useBlur1>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=easyBlur(cc_spriteTexture,realPos);\n  }\n  if(useBlur2>0.5){\n    useFunNum=useFunNum+1.0;\n    blurColor +=easyBlur2(cc_spriteTexture,realPos);\n  }\n  if(useFunNum==0.0){\n    o *= texture2D(cc_spriteTexture, realPos);\n  }else{\n    blurColor = blurColor / useFunNum;\n    o *= blurColor;\n  }\n  if(useGray>0.0){\n    float gray  = 0.3 * o.r + 0.7 * o.g + 0.1 * o.b;\n    o.r = o.g = o.b = gray;\n  }\n  o *= color;\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":54,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":8}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../models/shader/obscure/obscure|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"useGaussianBlur":{"type":13,"value":[0]},"useGaussianBlurLinear13":{"type":13,"value":[0]},"useBlur1":{"type":13,"value":[0]},"useBlur2":{"type":13,"value":[0]},"useGray":{"type":13,"value":[0]},"useMosaic":{"type":13,"value":[0]},"_BlurOffsetX":{"type":13,"value":[0]},"_BlurOffsetY":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]]]]
